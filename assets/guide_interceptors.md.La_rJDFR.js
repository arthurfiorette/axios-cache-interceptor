import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.CnuuF8_c.js";const C=JSON.parse('{"title":"Other Interceptors","description":"","frontmatter":{},"headers":[],"relativePath":"guide/interceptors.md","filePath":"guide/interceptors.md","lastUpdated":1755791588000}'),t={name:"guide/interceptors.md"};function h(p,s,l,k,r,o){return e(),a("div",null,s[0]||(s[0]=[n(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /guide/interceptors.md for this page in Markdown format</div><h1 id="other-interceptors" tabindex="-1">Other Interceptors <a class="header-anchor" href="#other-interceptors" aria-label="Permalink to &quot;Other Interceptors&quot;">​</a></h1><p>When combining <code>axios-cache-interceptors</code> with other interceptors, you may encounter some inconsistencies. Which is explained in the next section.</p><h2 id="tl-dr" tabindex="-1">TL;DR <a class="header-anchor" href="#tl-dr" aria-label="Permalink to &quot;TL;DR&quot;">​</a></h2><ul><li><strong>Request</strong> interceptors registered before <code>setupCache()</code> are ran before and registrations made after are ran after.</li><li><strong>Response</strong> interceptors registered before <code>setupCache()</code> are ran <strong>after</strong> and registrations made after are ran <strong>before</strong>.</li></ul><h2 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation&quot;">​</a></h2><p>Axios interceptors are ran differently for the request and response ones.</p><ul><li><strong>Request interceptors</strong> are FILO <em>(First In Last Out)</em></li><li><strong>Response interceptors</strong> are FIFO <em>(First In First Out)</em></li></ul><p>As explained better in the <a href="https://github.com/axios/axios#interceptors" target="_blank" rel="noreferrer">Axios documentation</a> and in <a href="https://github.com/arthurfiorette/axios-cache-interceptor/issues/449#issuecomment-1370327566" target="_blank" rel="noreferrer">this issue</a>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes kanagawa-wave kanagawa-lotus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#727169;--shiki-light:#716E61;">// This will be ran BEFORE the cache interceptor</span></span>
<span class="line"><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">axios</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">.</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">interceptors</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">.</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">request</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">.</span><span style="--shiki-dark:#7E9CD8;--shiki-light:#4D699B;">use</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">((</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">req</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">)</span><span style="--shiki-dark:#957FB8;--shiki-light:#624C83;"> =&gt;</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;"> req</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#727169;--shiki-light:#716E61;">// This will be ran AFTER the cache interceptor</span></span>
<span class="line"><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">axios</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">.</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">interceptors</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">.</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">response</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">.</span><span style="--shiki-dark:#7E9CD8;--shiki-light:#4D699B;">use</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">((</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">res</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">)</span><span style="--shiki-dark:#957FB8;--shiki-light:#624C83;"> =&gt;</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;"> res</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7E9CD8;--shiki-light:#4D699B;">setupCache</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">(</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">axios</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#727169;--shiki-light:#716E61;">// This will be ran AFTER the cache interceptor</span></span>
<span class="line"><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">axios</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">.</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">interceptors</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">.</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">request</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">.</span><span style="--shiki-dark:#7E9CD8;--shiki-light:#4D699B;">use</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">((</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">req</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">)</span><span style="--shiki-dark:#957FB8;--shiki-light:#624C83;"> =&gt;</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;"> req</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#727169;--shiki-light:#716E61;">// This will be ran BEFORE the cache interceptor</span></span>
<span class="line"><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">axios</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">.</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">interceptors</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">.</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">response</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">.</span><span style="--shiki-dark:#7E9CD8;--shiki-light:#4D699B;">use</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">((</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">res</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">)</span><span style="--shiki-dark:#957FB8;--shiki-light:#624C83;"> =&gt;</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;"> res</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">);</span></span></code></pre></div><hr><h2 id="extending-types" tabindex="-1">Extending types <a class="header-anchor" href="#extending-types" aria-label="Permalink to &quot;Extending types&quot;">​</a></h2><p>When using axios-cache-interceptor, you’ll note that it have a different type than the defaults <code>AxiosInstance</code>, <code>AxiosRequestConfig</code> and <code>AxiosResponse</code>. That’s because was chosen to override axios’s interfaces instead of extending, to avoid breaking changes with other libraries.</p><p>However, this also means that when integrating with other packages or creating your own custom interceptor, you need to override/extend our own types, <code>CacheInstance</code>, <code>CacheRequestConfig</code> and <code>CacheAxiosResponse</code> to match your needs.</p><p>This can be done as shown below:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes kanagawa-wave kanagawa-lotus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#957FB8;--shiki-light:#624C83;">declare</span><span style="--shiki-dark:#957FB8;--shiki-light:#624C83;"> module</span><span style="--shiki-dark:#98BB6C;--shiki-light:#6F894E;"> &#39;axios-cache-interceptor&#39;</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;"> {</span></span>
<span class="line"><span style="--shiki-dark:#957FB8;--shiki-light:#624C83;">  interface</span><span style="--shiki-dark:#7AA89F;--shiki-light:#597B75;"> CacheRequestConfig</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">&lt;</span><span style="--shiki-dark:#7AA89F;--shiki-light:#597B75;">R</span><span style="--shiki-dark:#E6C384;--shiki-light:#77713F;"> =</span><span style="--shiki-dark:#7AA89F;--shiki-light:#597B75;"> unknown</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">,</span><span style="--shiki-dark:#7AA89F;--shiki-light:#597B75;"> D</span><span style="--shiki-dark:#E6C384;--shiki-light:#77713F;"> =</span><span style="--shiki-dark:#7AA89F;--shiki-light:#597B75;"> unknown</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">&gt;</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;"> {</span></span>
<span class="line"><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">    customProperty</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">:</span><span style="--shiki-dark:#7AA89F;--shiki-light:#597B75;"> string</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">;</span></span>
<span class="line"><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">  }</span></span>
<span class="line"><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">}</span></span></code></pre></div><h2 id="streams-and-non-json" tabindex="-1">Streams and non-JSON <a class="header-anchor" href="#streams-and-non-json" aria-label="Permalink to &quot;Streams and non-JSON&quot;">​</a></h2><p>Sometimes you may want to cache a response that is not <code>JSON</code>, or that is a <code>Stream</code>. Either created by another interceptor or even by the axios adapter itself.</p><p>To do so, you can use the axios’s native <code>transformResponse</code> option, which is a function that receives the response and returns a string or a buffer.</p><p><strong>Axios Cache Interceptor</strong> can only handle serializable data types, so you need to convert the response to a string or a buffer.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes kanagawa-wave kanagawa-lotus has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#FFA066;--shiki-light:#CC6D00;">import </span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">Axios</span><span style="--shiki-dark:#957FB8;--shiki-light:#624C83;"> from</span><span style="--shiki-dark:#98BB6C;--shiki-light:#6F894E;"> &#39;axios&#39;</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">;</span></span>
<span class="line"><span style="--shiki-dark:#FFA066;--shiki-light:#CC6D00;">import </span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">{</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;"> setupCache</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;"> }</span><span style="--shiki-dark:#957FB8;--shiki-light:#624C83;"> from</span><span style="--shiki-dark:#98BB6C;--shiki-light:#6F894E;"> &#39;axios-cache-interceptor&#39;</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#957FB8;--shiki-light:#624C83;">const</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;"> instance </span><span style="--shiki-dark:#E6C384;--shiki-light:#77713F;">=</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;"> Axios</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">.</span><span style="--shiki-dark:#7E9CD8;--shiki-light:#4D699B;">create</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">();</span></span>
<span class="line"><span style="--shiki-dark:#957FB8;--shiki-light:#624C83;">const</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;"> axios </span><span style="--shiki-dark:#E6C384;--shiki-light:#77713F;">=</span><span style="--shiki-dark:#7E9CD8;--shiki-light:#4D699B;"> setupCache</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">(</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">instance</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">);</span></span>
<span class="line has-focus"><span style="--shiki-dark:#957FB8;--shiki-light:#624C83;">const</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;"> response </span><span style="--shiki-dark:#E6C384;--shiki-light:#77713F;">=</span><span style="--shiki-dark:#957FB8;--shiki-dark-font-weight:bold;--shiki-light:#624C83;--shiki-light-font-weight:bold;"> await</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;"> axios</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">.</span><span style="--shiki-dark:#7E9CD8;--shiki-light:#4D699B;">get</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">(</span><span style="--shiki-dark:#98BB6C;--shiki-light:#6F894E;">&#39;my-url-that-returns-a-stream&#39;</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">,</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;"> {</span></span>
<span class="line has-focus"><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">  responseType</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">:</span><span style="--shiki-dark:#98BB6C;--shiki-light:#6F894E;"> &#39;stream&#39;</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">,</span></span>
<span class="line has-focus"><span style="--shiki-dark:#7E9CD8;--shiki-light:#4D699B;">  transformResponse</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">(</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">response</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">)</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;"> {</span></span>
<span class="line has-focus"><span style="--shiki-dark:#727169;--shiki-light:#716E61;">    // You will need to implement this function.</span></span>
<span class="line has-focus"><span style="--shiki-dark:#957FB8;--shiki-dark-font-weight:bold;--shiki-light:#624C83;--shiki-light-font-weight:bold;">    return</span><span style="--shiki-dark:#7E9CD8;--shiki-light:#4D699B;"> convertStreamToStringOrObject</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">(</span><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">response</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">.</span><span style="--shiki-dark:#E6C384;--shiki-light:#77713F;">data</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">);</span></span>
<span class="line has-focus"><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">  }</span></span>
<span class="line has-focus"><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">});</span></span>
<span class="line has-focus"><wbr></span>
<span class="line"><span style="--shiki-dark:#DCD7BA;--shiki-light:#545464;">response</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">.</span><span style="--shiki-dark:#E6C384;--shiki-light:#77713F;">data</span><span style="--shiki-dark:#9CABCA;--shiki-light:#4E8CA2;">;</span><span style="--shiki-dark:#727169;--shiki-light:#716E61;"> // Will be a string and will be able to be cached.</span></span></code></pre></div><p>This library cannot handle streams or buffers, so if you still need <code>response.data</code> to be a stream or buffer, you will need to cache it manually.</p><p>If you can collect the response data into a serializable format, <code>axios-cache-interceptor</code> can handle it for you with help of the <code>transformResponse</code> option.</p>`,23)]))}const A=i(t,[["render",h]]);export{C as __pageData,A as default};
